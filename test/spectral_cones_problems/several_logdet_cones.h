#include "glbopts.h"
#include "linalg.h"
#include "minunit.h"
#include "problem_utils.h"
#include "rw.h"
#include "scs.h"
#include "scs_matrix.h"
#include "util.h"

// for SpectralSCS
static const char *several_logdet_cones(void)
{
    ScsCone *k = (ScsCone *)scs_calloc(1, sizeof(ScsCone));
    ScsData *d = (ScsData *)scs_calloc(1, sizeof(ScsData));
    ScsSettings *stgs = (ScsSettings *)scs_calloc(1, sizeof(ScsSettings));
    ScsSolution *sol = (ScsSolution *)scs_calloc(1, sizeof(ScsSolution));
    ScsInfo info = {0};
    scs_int exitflag;
    scs_float perr, derr;
    scs_int success;
    const char *fail;

    /* data */
    scs_float Ax[] = {-1., -1., 1., -1., 1.,
                      -1., 3.24, 0.16, 1., 4.84,
                      3.61, 1., 1., 0.04, 0.01,
                      0.16, -1., 0.25455844, 0.84852814, 1.13137085,
                      0.31112698, 1.07480231, -0.42426407, 2.12132034, 0.05656854,
                      -0.04242641, -0.50911688, -1., -6.61851947, 0.3959798,
                      1.27279221, -2.17788889, 6.18011327, 2.12132034, 0.05656854,
                      -0.21213203, 0.84852814, -1., 0.50911688, 0.22627417,
                      -1.27279221, -6.22253967, -0.80610173, -0.28284271, 1.69705627,
                      -0.33941125, 0.05656854, -0.16970563, -1., -2.54558441,
                      -0.79195959, -2.40416306, 6.22253967, -1.34350288, 0.56568542,
                      -1.83847763, -0.22627417, 0.22627417, -0.11313708, -1.,
                      0.01, 2.25, 0.64, 0.01, 0.16,
                      0.09, 2.25, 0.04, 0.09, 0.81,
                      -1., -0.36769553, 1.48492424, 1.01823376, -0.09899495,
                      1.30107648, -0.6363961, 0.05656854, 0.6363961, -1.90918831,
                      -1., 0.02828427, 0.84852814, -1.01823376, -0.28284271,
                      -0.16970563, 0.08485281, 2.54558441, -0.33941125, -0.16970563,
                      0.38183766, -1., -0.14142136, -2.96984848, -1.92333044,
                      0.28284271, -0.28284271, -0.16970563, -2.75771645, -0.22627417,
                      -0.67882251, 0.25455844, -1., 6.76, 0.49,
                      0.81, 0.49, 5.29, 2.25, 0.04,
                      2.25, 2.25, -1., -0.73539105, 0.3959798,
                      -1.14551299, 1.97989899, -0.97580736, -0.42426407, -0.33941125,
                      -0.84852814, -0.6363961, -1., 3.67695526, -1.38592929,
                      -2.16374675, -1.97989899, -1.6263456, 0.84852814, -0.22627417,
                      -3.39411255, -0.42426407, -1., 0.04, 0.16,
                      0.81, 4., 0.09, 0.04, 1.44,
                      1.44, 0.16, 0.09, -1., -0.28284271,
                      -0.79195959, 2.16374675, -5.65685425, 0.21213203, -0.11313708,
                      -2.20617316, 1.35764502, 0.90509668, 0.08485281, -1.,
                      1., 1.96, 2.89, 4., 0.25,
                      0.16, 1.69, 0.64, 2.56, 0.04,
                      -1., 3.24, 0.16, 1., 4.84,
                      3.61, 1., 1., 0.04, 0.01,
                      0.16, -1., 0.25455844, 0.84852814, 1.13137085,
                      0.31112698, 1.07480231, -0.42426407, 2.12132034, 0.05656854,
                      -0.04242641, -0.50911688, -1., -6.61851947, 0.3959798,
                      1.27279221, -2.17788889, 6.18011327, 2.12132034, 0.05656854,
                      -0.21213203, 0.84852814, -1., 0.50911688, 0.22627417,
                      -1.27279221, -6.22253967, -0.80610173, -0.28284271, 1.69705627,
                      -0.33941125, 0.05656854, -0.16970563, -1., -2.54558441,
                      -0.79195959, -2.40416306, 6.22253967, -1.34350288, 0.56568542,
                      -1.83847763, -0.22627417, 0.22627417, -0.11313708, -1.,
                      0.01, 2.25, 0.64, 0.01, 0.16,
                      0.09, 2.25, 0.04, 0.09, 0.81,
                      -1., -0.36769553, 1.48492424, 1.01823376, -0.09899495,
                      1.30107648, -0.6363961, 0.05656854, 0.6363961, -1.90918831,
                      -1., 0.02828427, 0.84852814, -1.01823376, -0.28284271,
                      -0.16970563, 0.08485281, 2.54558441, -0.33941125, -0.16970563,
                      0.38183766, -1., -0.14142136, -2.96984848, -1.92333044,
                      0.28284271, -0.28284271, -0.16970563, -2.75771645, -0.22627417,
                      -0.67882251, 0.25455844, -1., 6.76, 0.49,
                      0.81, 0.49, 5.29, 2.25, 0.04,
                      2.25, 2.25, -1., -0.73539105, 0.3959798,
                      -1.14551299, 1.97989899, -0.97580736, -0.42426407, -0.33941125,
                      -0.84852814, -0.6363961, -1., 3.67695526, -1.38592929,
                      -2.16374675, -1.97989899, -1.6263456, 0.84852814, -0.22627417,
                      -3.39411255, -0.42426407, -1., 0.04, 0.16,
                      0.81, 4., 0.09, 0.04, 1.44,
                      1.44, 0.16, 0.09, -1., -0.28284271,
                      -0.79195959, 2.16374675, -5.65685425, 0.21213203, -0.11313708,
                      -2.20617316, 1.35764502, 0.90509668, 0.08485281, -1.,
                      1., 1.96, 2.89, 4., 0.25,
                      0.16, 1.69, 0.64, 2.56, 0.04,
                      -1.};
    scs_int Ai[] = {12, 29, 0, 13, 1, 30, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14,
                    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 2, 3, 4, 5, 6, 7,
                    9, 10, 11, 16, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 2, 3,
                    4, 5, 6, 7, 8, 9, 10, 11, 18, 2, 3, 4, 5, 6, 7, 8, 9,
                    10, 11, 19, 2, 3, 4, 5, 6, 7, 9, 10, 11, 20, 2, 3, 4, 5,
                    6, 7, 8, 9, 10, 11, 21, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                    22, 2, 3, 4, 5, 6, 7, 9, 10, 11, 23, 2, 3, 4, 5, 6, 7,
                    9, 10, 11, 24, 2, 3, 4, 5, 6, 7, 9, 10, 11, 25, 2, 3, 4,
                    5, 6, 7, 8, 9, 10, 11, 26, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                    11, 27, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 28, 2, 3, 4, 5,
                    6, 7, 8, 9, 10, 11, 31, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                    32, 2, 3, 4, 5, 6, 7, 9, 10, 11, 33, 2, 3, 4, 5, 6, 7,
                    8, 9, 10, 11, 34, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 2,
                    3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 2, 3, 4, 5, 6, 7, 9,
                    10, 11, 37, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 38, 2, 3, 4,
                    5, 6, 7, 8, 9, 10, 11, 39, 2, 3, 4, 5, 6, 7, 9, 10, 11,
                    40, 2, 3, 4, 5, 6, 7, 9, 10, 11, 41, 2, 3, 4, 5, 6, 7,
                    9, 10, 11, 42, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 43, 2, 3,
                    4, 5, 6, 7, 8, 9, 10, 11, 44, 2, 3, 4, 5, 6, 7, 8, 9,
                    10, 11, 45};
    scs_int Ap[] = {0, 1, 2, 4, 6, 17, 28, 38, 49, 60, 71, 81, 92,
                    103, 113, 123, 133, 144, 155, 166, 177, 188, 198, 209, 220, 231,
                    241, 252, 263, 273, 283, 293, 304, 315, 326};

    scs_float b[] = {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
    scs_float c[] = {1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
    scs_int m = 46;
    scs_int n = 34;

    scs_int z = 2;
    scs_int l = 10;
    scs_int *q = SCS_NULL;
    scs_int qsize = 0;
    scs_int *s = SCS_NULL;
    scs_int ssize = 0;
    scs_int ep = 0;
    scs_int ed = 0;
    scs_float *p = SCS_NULL;
    scs_int psize = 0;
    scs_int d_array[] = {5, 5};
    scs_int dsize = 2;
    scs_int *nuc_m = SCS_NULL;
    scs_int *nuc_n = SCS_NULL;
    scs_int nucsize = 0;
    scs_int *ell1 = SCS_NULL;
    scs_int ell1_size = 0;
    scs_int *sl_n = SCS_NULL;
    scs_int *sl_k = SCS_NULL;
    scs_int sl_size = 0;

    // computed using mosek (the input of Ax is truncated, and mosek solved
    // the problem with the non-truncated data)
    scs_float opt = 24.097175949228443;
    /* end data */

    d->m = m;
    d->n = n;
    d->b = b;
    d->c = c;

    d->A = (ScsMatrix *)scs_calloc(1, sizeof(ScsMatrix));

    d->A->m = m;
    d->A->n = n;
    d->A->x = Ax;
    d->A->i = Ai;
    d->A->p = Ap;

    k->z = z;
    k->l = l;
    k->q = q;
    k->qsize = qsize;
    k->s = s;
    k->ssize = ssize;
    k->ep = ep;
    k->ed = ed;
    k->p = p;
    k->psize = psize;
    k->d = d_array;
    k->dsize = dsize;
    k->nuc_m = nuc_m;
    k->nuc_n = nuc_n;
    k->nucsize = nucsize;
    k->ell1 = ell1;
    k->ell1_size = ell1_size;
    k->sl_n = sl_n;
    k->sl_k = sl_k;
    k->sl_size = sl_size;

    scs_set_default_settings(stgs);
    stgs->eps_abs = 1e-6;
    stgs->eps_rel = 1e-6;
    stgs->eps_infeas = 1e-9;


    stgs->log_csv_filename="several_logdet_cone.csv";
    exitflag = scs(d, k, stgs, sol, &info);

    perr = SCS(dot)(d->c, sol->x, d->n) - opt;
    derr = -SCS(dot)(d->b, sol->y, d->m) - opt;

    success = ABS(perr) < 1e-4 && ABS(derr) < 1e-4 && exitflag == SCS_SOLVED;

    mu_assert("several_logdet_cones: SCS failed to produce outputflag SCS_SOLVED",
              success);

    fail = 0;
    // TODO: Talk to Brendan. This test fails because of the complementary
    // slackness check.
    //fail = verify_solution_correct(d, k, stgs, &info, sol, exitflag);
    //if (fail)
    //    return fail;

    /* kill data */
    scs_free(d->A);
    scs_free(k);
    scs_free(stgs);
    scs_free(d);
    SCS(free_sol)
    (sol);

    return fail;
}
